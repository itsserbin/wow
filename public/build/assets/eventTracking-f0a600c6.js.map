{"version":3,"file":"eventTracking-f0a600c6.js","sources":["../../../node_modules/@gtm-support/vue-gtm/dist/index.js","../../../resources/js/Includes/eventTracking.js"],"sourcesContent":["import { GtmSupport, loadScript } from \"@gtm-support/core\";\nimport { GtmSupport as GtmSupport2, GtmSupport as GtmSupport3, assertIsGtmId, hasScript, loadScript as loadScript2 } from \"@gtm-support/core\";\nimport { nextTick } from \"vue\";\nlet gtmPlugin;\nfunction install(app, options = { id: \"\" }) {\n  options = { trackOnNextTick: false, ...options };\n  gtmPlugin = new GtmSupport(options);\n  app.config.globalProperties.$gtm = gtmPlugin;\n  if (gtmPlugin.isInBrowserContext()) {\n    if (options.vueRouter) {\n      initVueRouterGuard(\n        app,\n        options.vueRouter,\n        options.ignoredViews,\n        options.trackOnNextTick,\n        options.vueRouterAdditionalEventData\n      );\n    }\n    if (gtmPlugin.options.enabled && gtmPlugin.options.loadScript) {\n      if (Array.isArray(options.id)) {\n        options.id.forEach((id) => {\n          if (typeof id === \"string\") {\n            loadScript(id, options);\n          } else {\n            const newConf = {\n              ...options\n            };\n            if (id.queryParams != null) {\n              newConf.queryParams = {\n                ...newConf.queryParams,\n                ...id.queryParams\n              };\n            }\n            loadScript(id.id, newConf);\n          }\n        });\n      } else {\n        loadScript(options.id, options);\n      }\n    }\n  }\n  app.provide(\"gtm\", options);\n}\nfunction initVueRouterGuard(app, vueRouter, ignoredViews = [], trackOnNextTick, deriveAdditionalEventData = () => ({})) {\n  function isNavigationFailure(failure, navigationFailureType) {\n    if (!(failure instanceof Error)) {\n      return false;\n    }\n    return !!(failure.type & navigationFailureType);\n  }\n  vueRouter.afterEach(async (to, from, failure) => {\n    var _a, _b, _c;\n    if (typeof to.name !== \"string\" || Array.isArray(ignoredViews) && ignoredViews.includes(to.name) || typeof ignoredViews === \"function\" && ignoredViews(to, from)) {\n      return;\n    }\n    const name = to.meta && typeof to.meta.gtm === \"string\" && !!to.meta.gtm ? to.meta.gtm : to.name;\n    if (isNavigationFailure(failure, 4)) {\n      if (gtmPlugin == null ? void 0 : gtmPlugin.debugEnabled()) {\n        console.log(\n          `[VueGtm]: '${name}' not tracked due to navigation aborted`\n        );\n      }\n    } else if (isNavigationFailure(failure, 8)) {\n      if (gtmPlugin == null ? void 0 : gtmPlugin.debugEnabled()) {\n        console.log(\n          `[VueGtm]: '${name}' not tracked due to navigation cancelled`\n        );\n      }\n    }\n    const additionalEventData = {\n      ...await deriveAdditionalEventData(to, from),\n      ...(_a = to.meta) == null ? void 0 : _a.gtmAdditionalEventData\n    };\n    const baseUrl = ((_c = (_b = vueRouter.options) == null ? void 0 : _b.history) == null ? void 0 : _c.base) ?? \"\";\n    let fullUrl = baseUrl;\n    if (!fullUrl.endsWith(\"/\")) {\n      fullUrl += \"/\";\n    }\n    fullUrl += to.fullPath.startsWith(\"/\") ? to.fullPath.substring(1) : to.fullPath;\n    if (trackOnNextTick) {\n      void nextTick(() => {\n        gtmPlugin == null ? void 0 : gtmPlugin.trackView(name, fullUrl, additionalEventData);\n      });\n    } else {\n      gtmPlugin == null ? void 0 : gtmPlugin.trackView(name, fullUrl, additionalEventData);\n    }\n  });\n}\nfunction createGtm(options) {\n  return { install: (app) => install(app, options) };\n}\nconst _default = { install };\nfunction useGtm() {\n  return gtmPlugin;\n}\nexport {\n  GtmSupport2 as GtmPlugin,\n  GtmSupport3 as GtmSupport,\n  assertIsGtmId,\n  createGtm,\n  _default as default,\n  hasScript,\n  loadScript2 as loadScript,\n  useGtm\n};\n","export default function (event = '', params = {}, event_id = null) {\n    fbq('track', event, params, {event_id: event_id});\n}\n"],"names":["gtmPlugin","useGtm","eventTracking","event","params","event_id"],"mappings":"AAGA,IAAIA,EAyFJ,SAASC,GAAS,CAChB,OAAOD,CACT,CC9Fe,SAAAE,EAAUC,EAAQ,GAAIC,EAAS,CAAA,EAAIC,EAAW,KAAM,CAC/D,IAAI,QAASF,EAAOC,EAAQ,CAAC,SAAUC,CAAQ,CAAC,CACpD","x_google_ignoreList":[0]}