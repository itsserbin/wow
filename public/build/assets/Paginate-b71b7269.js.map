{"version":3,"file":"Paginate-b71b7269.js","sources":["../../../resources/js/Components/Paginate.vue"],"sourcesContent":["<script setup>\nimport {computed, onBeforeMount, onBeforeUpdate, onMounted, ref} from \"vue\";\n\nconst state = ref({\n    innerValue: 1,\n    pageCount: null,\n})\n\nconst props = defineProps({\n    pagination: {\n        type: Object\n    },\n    modelValue: {\n        type: Number\n    },\n    pageRange: {\n        type: Number,\n        default: 10\n    },\n    initialPage: {\n        type: Number,\n        default: 1\n    },\n    forcePage: {\n        type: Number\n    },\n    clickHandler: {\n        type: Function,\n        default: () => {\n        }\n    },\n    marginPages: {\n        type: Number,\n        default: 1\n    },\n    prevText: {\n        type: String,\n        default: '<'\n    },\n    nextText: {\n        type: String,\n        default: '>'\n    },\n    breakViewText: {\n        type: String,\n        default: 'â€¦'\n    },\n    containerClass: {\n        type: String,\n        default: 'inline-flex -space-x-px rounded-lg  dark:bg-gray-800'\n    },\n    pageClass: {\n        type: String,\n        default: 'cursor-pointer py-2 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'\n    },\n    pageLinkClass: {\n        type: String,\n        default: 'px-3'\n    },\n    prevClass: {\n        type: String,\n        default: 'cursor-pointer py-2 px-3 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'\n    },\n    prevLinkClass: {\n        type: String,\n        default: ''\n    },\n    nextClass: {\n        type: String,\n        default: 'cursor-pointer py-2 px-3 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'\n    },\n    nextLinkClass: {\n        type: String,\n        default: ''\n    },\n    breakViewClass: {\n        type: String\n    },\n    breakViewLinkClass: {\n        type: String\n    },\n    activeClass: {\n        type: String,\n        default: 'bg-gray-100 text-gray-700 dark:bg-gray-700 dark:text-white'\n    },\n    disabledClass: {\n        type: String,\n        default: 'disabled'\n    },\n    noLiSurround: {\n        type: Boolean,\n        default: false\n    },\n    firstLastButton: {\n        type: Boolean,\n        default: true\n    },\n    firstButtonText: {\n        type: String,\n        default: '<<'\n    },\n    lastButtonText: {\n        type: String,\n        default: '>>'\n    },\n    hidePrevNext: {\n        type: Boolean,\n        default: false\n    }\n});\n\nonBeforeMount(() => {\n    state.value.innerValue = props.initialPage;\n})\n\nonBeforeUpdate(() => {\n    if (props.forcePage === undefined) return\n    if (props.forcePage !== selected.value) {\n        selected.value = props.forcePage\n    }\n})\n\nconst selected = computed({\n    get() {\n        return props.modelValue || state.value.innerValue\n    },\n    set(newValue) {\n        state.value.innerValue = newValue\n    }\n})\n\nconst pages = computed(() => {\n    let items = {};\n    state.value.pageCount = props.pagination.last_page;\n\n    if (state.value.pageCount <= props.pageRange) {\n        for (let index = 0; index < state.value.pageCount; index++) {\n            items[index] = {\n                index: index,\n                content: index + 1,\n                selected: index === (selected.value - 1)\n            }\n        }\n    } else {\n        const halfPageRange = Math.floor(props.pageRange / 2)\n\n        let setPageItem = index => {\n            items[index] = {\n                index: index,\n                content: index + 1,\n                selected: index === (selected.value - 1)\n            }\n        }\n\n        let setBreakView = index => {\n            items[index] = {\n                disabled: true,\n                breakView: true\n            }\n        }\n\n        // 1st - loop thru low end of margin pages\n        for (let i = 0; i < props.marginPages; i++) {\n            setPageItem(i);\n        }\n\n        // 2nd - loop thru selected range\n        let selectedRangeLow = 0;\n        if (selected.value - halfPageRange > 0) {\n            selectedRangeLow = selected.value - 1 - halfPageRange;\n        }\n\n        let selectedRangeHigh = selectedRangeLow + props.pageRange - 1;\n        if (selectedRangeHigh >= state.value.pageCount) {\n            selectedRangeHigh = state.value.pageCount - 1;\n            selectedRangeLow = selectedRangeHigh - props.pageRange + 1;\n        }\n\n        for (let i = selectedRangeLow; i <= selectedRangeHigh && i <= state.value.pageCount - 1; i++) {\n            setPageItem(i);\n        }\n\n        // Check if there is breakView in the left of selected range\n        if (selectedRangeLow > props.marginPages) {\n            setBreakView(selectedRangeLow - 1)\n        }\n\n        // Check if there is breakView in the right of selected range\n        if (selectedRangeHigh + 1 < state.value.pageCount - props.marginPages) {\n            setBreakView(selectedRangeHigh + 1)\n        }\n\n        // 3rd - loop thru high end of margin pages\n        for (let i = state.value.pageCount - 1; i >= state.value.pageCount - props.marginPages; i--) {\n            setPageItem(i);\n        }\n    }\n    return items\n})\n\nconst emits = defineEmits(['update:modelValue']);\n\nfunction handlePageSelected(value) {\n\n\n    if (selected.value === value) return\n\n    state.value.innerValue = value\n    emits('update:modelValue', value)\n    props.clickHandler(value)\n}\n\nfunction prevPage() {\n    if (selected.value <= 1) return\n\n    handlePageSelected(selected.value - 1)\n}\n\nfunction nextPage() {\n    if (selected.value >= state.value.pageCount) return\n\n    handlePageSelected(selected.value + 1)\n}\n\nfunction firstPageSelected() {\n    return selected.value === 1\n}\n\nfunction lastPageSelected() {\n    return (selected.value === state.value.pageCount) || (state.value.pageCount === 0)\n}\n\nfunction selectFirstPage() {\n    if (selected.value <= 1) return\n\n    handlePageSelected(1)\n}\n\nfunction selectLastPage() {\n    if (selected.value >= state.value.pageCount) return\n\n    handlePageSelected(state.value.pageCount)\n}\n</script>\n\n<template>\n    <ul :class=\"containerClass\" v-if=\"!noLiSurround\">\n        <li v-if=\"firstLastButton\" :class=\"[pageClass, firstPageSelected() ? disabledClass : '']\">\n            <a\n                @click=\"selectFirstPage()\"\n                @keyup.enter=\"selectFirstPage()\"\n                :class=\"pageLinkClass\"\n                :tabindex=\"firstPageSelected() ? -1 : 0\"\n                v-html=\"firstButtonText\"\n            ></a>\n        </li>\n\n        <li\n            v-if=\"!(firstPageSelected() && hidePrevNext)\"\n            :class=\"[prevClass, firstPageSelected() ? disabledClass : '']\"\n        >\n            <a\n                @click=\"prevPage()\"\n                @keyup.enter=\"prevPage()\"\n                :class=\"prevLinkClass\"\n                :tabindex=\"firstPageSelected() ? -1 : 0\"\n                v-html=\"prevText\"\n            ></a>\n        </li>\n\n        <li\n            v-for=\"page in pages\"\n            :key=\"page.index\"\n            :class=\"[pageClass, page.selected ? activeClass : '', page.disabled ? disabledClass : '', page.breakView ? breakViewClass : '']\"\n        >\n            <a v-if=\"page.breakView\"\n               :class=\"[pageLinkClass, breakViewLinkClass]\"\n               tabindex=\"0\"\n            >\n                <slot name=\"breakViewContent\">{{ breakViewText }}</slot>\n            </a>\n            <a v-else-if=\"page.disabled\"\n               :class=\"pageLinkClass\"\n               tabindex=\"0\"\n            >{{ page.content }}</a>\n            <a\n                v-else\n                @click=\"handlePageSelected(page.index + 1)\"\n                @keyup.enter=\"handlePageSelected(page.index + 1)\"\n                :class=\"pageLinkClass\"\n                tabindex=\"0\"\n            >{{ page.content }}</a>\n        </li>\n\n        <li\n            v-if=\"!(lastPageSelected() && hidePrevNext)\"\n            :class=\"[nextClass, lastPageSelected() ? disabledClass : '']\"\n        >\n            <a\n                @click=\"nextPage()\"\n                @keyup.enter=\"nextPage()\"\n                :class=\"nextLinkClass\"\n                :tabindex=\"lastPageSelected() ? -1 : 0\"\n                v-html=\"nextText\"\n            ></a>\n        </li>\n\n        <li v-if=\"firstLastButton\" :class=\"[pageClass, lastPageSelected() ? disabledClass : '']\">\n            <a\n                @click=\"selectLastPage()\"\n                @keyup.enter=\"selectLastPage()\"\n                :class=\"pageLinkClass\"\n                :tabindex=\"lastPageSelected() ? -1 : 0\"\n                v-html=\"lastButtonText\"\n            ></a>\n        </li>\n    </ul>\n\n    <div :class=\"containerClass\" v-else>\n        <a\n            v-if=\"firstLastButton\"\n            @click=\"selectFirstPage()\"\n            @keyup.enter=\"selectFirstPage()\"\n            :class=\"[pageLinkClass, firstPageSelected() ? disabledClass : '']\"\n            tabindex=\"0\"\n            v-html=\"firstButtonText\"\n        ></a>\n        <a\n            v-if=\"!(firstPageSelected() && hidePrevNext)\"\n            @click=\"prevPage()\"\n            @keyup.enter=\"prevPage()\"\n            :class=\"[prevLinkClass, firstPageSelected() ? disabledClass : '']\"\n            tabindex=\"0\"\n            v-html=\"prevText\"\n        ></a>\n        <template v-for=\"page in pages\">\n            <a\n                v-if=\"page.breakView\"\n                :key=\"page.index\"\n                :class=\"[pageLinkClass, breakViewLinkClass, page.disabled ? disabledClass : '']\"\n                tabindex=\"0\"\n            >\n                <slot name=\"breakViewContent\">{{ breakViewText }}</slot>\n            </a>\n            <a\n                v-else-if=\"page.disabled\"\n                :key=\"page.index\"\n                :class=\"[pageLinkClass, page.selected ? activeClass : '', disabledClass]\"\n                tabindex=\"0\"\n            >{{ page.content }}</a>\n            <a\n                v-else\n                :key=\"page.index\"\n                @click=\"handlePageSelected(page.index + 1)\"\n                @keyup.enter=\"handlePageSelected(page.index + 1)\"\n                :class=\"[pageLinkClass, page.selected ? activeClass : '']\"\n                tabindex=\"0\"\n            >{{ page.content }}</a>\n        </template>\n        <a\n            v-if=\"!(lastPageSelected() && hidePrevNext)\"\n            @click=\"nextPage()\"\n            @keyup.enter=\"nextPage()\"\n            :class=\"[nextLinkClass, lastPageSelected() ? disabledClass : '']\"\n            tabindex=\"0\"\n            v-html=\"nextText\"\n        ></a>\n        <a\n            v-if=\"firstLastButton\"\n            @click=\"selectLastPage()\"\n            @keyup.enter=\"selectLastPage()\"\n            :class=\"[pageLinkClass, lastPageSelected() ? disabledClass : '']\"\n            tabindex=\"0\"\n            v-html=\"lastButtonText\"\n        ></a>\n    </div>\n</template>\n"],"names":["state","ref","onBeforeMount","props","onBeforeUpdate","selected","computed","newValue","pages","items","index","halfPageRange","setPageItem","setBreakView","i","selectedRangeLow","selectedRangeHigh","handlePageSelected","value","emits","prevPage","nextPage","firstPageSelected","lastPageSelected","selectFirstPage","selectLastPage"],"mappings":"ooEAGMA,EAAQC,EAAI,CACd,WAAY,EACZ,UAAW,IACf,CAAC,EAyGDC,EAAc,IAAM,CAChBF,EAAM,MAAM,WAAaG,EAAM,WACnC,CAAC,EAEDC,EAAe,IAAM,CACbD,EAAM,YAAc,QACpBA,EAAM,YAAcE,EAAS,QAC7BA,EAAS,MAAQF,EAAM,UAE/B,CAAC,EAED,MAAME,EAAWC,EAAS,CACtB,KAAM,CACF,OAAOH,EAAM,YAAcH,EAAM,MAAM,UAC1C,EACD,IAAIO,EAAU,CACVP,EAAM,MAAM,WAAaO,CAC5B,CACL,CAAC,EAEKC,EAAQF,EAAS,IAAM,CACzB,IAAIG,EAAQ,CAAA,EAGZ,GAFAT,EAAM,MAAM,UAAYG,EAAM,WAAW,UAErCH,EAAM,MAAM,WAAaG,EAAM,UAC/B,QAASO,EAAQ,EAAGA,EAAQV,EAAM,MAAM,UAAWU,IAC/CD,EAAMC,CAAK,EAAI,CACX,MAAOA,EACP,QAASA,EAAQ,EACjB,SAAUA,IAAWL,EAAS,MAAQ,CACzC,MAEF,CACH,MAAMM,EAAgB,KAAK,MAAMR,EAAM,UAAY,CAAC,EAEpD,IAAIS,EAAcF,GAAS,CACvBD,EAAMC,CAAK,EAAI,CACX,MAAOA,EACP,QAASA,EAAQ,EACjB,SAAUA,IAAWL,EAAS,MAAQ,CACzC,CACJ,EAEGQ,EAAeH,GAAS,CACxBD,EAAMC,CAAK,EAAI,CACX,SAAU,GACV,UAAW,EACd,CACJ,EAGD,QAASI,EAAI,EAAGA,EAAIX,EAAM,YAAaW,IACnCF,EAAYE,CAAC,EAIjB,IAAIC,EAAmB,EACnBV,EAAS,MAAQM,EAAgB,IACjCI,EAAmBV,EAAS,MAAQ,EAAIM,GAG5C,IAAIK,EAAoBD,EAAmBZ,EAAM,UAAY,EACzDa,GAAqBhB,EAAM,MAAM,YACjCgB,EAAoBhB,EAAM,MAAM,UAAY,EAC5Ce,EAAmBC,EAAoBb,EAAM,UAAY,GAG7D,QAASW,EAAIC,EAAkBD,GAAKE,GAAqBF,GAAKd,EAAM,MAAM,UAAY,EAAGc,IACrFF,EAAYE,CAAC,EAIbC,EAAmBZ,EAAM,aACzBU,EAAaE,EAAmB,CAAC,EAIjCC,EAAoB,EAAIhB,EAAM,MAAM,UAAYG,EAAM,aACtDU,EAAaG,EAAoB,CAAC,EAItC,QAASF,EAAId,EAAM,MAAM,UAAY,EAAGc,GAAKd,EAAM,MAAM,UAAYG,EAAM,YAAaW,IACpFF,EAAYE,CAAC,EAGrB,OAAOL,CACX,CAAC,EAID,SAASQ,EAAmBC,EAAO,CAG3Bb,EAAS,QAAUa,IAEvBlB,EAAM,MAAM,WAAakB,EACzBC,EAAM,oBAAqBD,CAAK,EAChCf,EAAM,aAAae,CAAK,EAC5B,CAEA,SAASE,GAAW,CACZf,EAAS,OAAS,GAEtBY,EAAmBZ,EAAS,MAAQ,CAAC,CACzC,CAEA,SAASgB,GAAW,CACZhB,EAAS,OAASL,EAAM,MAAM,WAElCiB,EAAmBZ,EAAS,MAAQ,CAAC,CACzC,CAEA,SAASiB,GAAoB,CACzB,OAAOjB,EAAS,QAAU,CAC9B,CAEA,SAASkB,GAAmB,CACxB,OAAQlB,EAAS,QAAUL,EAAM,MAAM,WAAeA,EAAM,MAAM,YAAc,CACpF,CAEA,SAASwB,GAAkB,CACnBnB,EAAS,OAAS,GAEtBY,EAAmB,CAAC,CACxB,CAEA,SAASQ,GAAiB,CAClBpB,EAAS,OAASL,EAAM,MAAM,WAElCiB,EAAmBjB,EAAM,MAAM,SAAS,CAC5C"}